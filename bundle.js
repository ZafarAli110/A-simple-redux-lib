(()=>{"use strict";eval("\n;// CONCATENATED MODULE: ./src_v3/redux/createStore.js\n// Original redux.js createStore ref: https://github.com/reduxjs/redux/blob/d6bad9a8be90defc71b27c33e1348a4f6133b852/src/createStore.js\nfunction createStore(reducer, preloadedState, middleware) {\n  let currentReducer = reducer;\n  let currentState = preloadedState; // initial state while creating the store.\n\n  let currentListners = [];\n  let nextListners = currentListners;\n\n  function getState() {\n    return currentState;\n  }\n\n  function dispatch(action) {\n    if (!action || typeof action !== 'object' || Array.isArray(action)) {\n      throw new Error('Action must be an object!');\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error('Action must have a type!');\n    } // Reducer returns the new state\n\n\n    currentState = currentReducer(currentState, action); // Calling all the listeners/subscribers so that they can get the updated state\n\n    const listeners = currentListners = nextListners;\n\n    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i];\n      listener();\n    }\n\n    return action;\n  }\n\n  function subscribe(listener) {\n    nextListners.push(listener);\n  }\n\n  if (middleware) {\n    return {\n      getState,\n      dispatch: middleware({\n        dispatch,\n        getState\n      })(dispatch),\n      subscribe\n    };\n  } else {\n    return {\n      getState,\n      dispatch,\n      subscribe\n    };\n  }\n}\n;// CONCATENATED MODULE: ./src_v3/redux/utils/combineReducers.js\n/* \r\n  The combineReducers function call takes an object with reducers and returns a reducer \r\n  function, the returned function must have the signature of a reducer function (the state and an action).\r\n*/\n// Original reduxjs combineReducers ref: https://github.com/reduxjs/redux/blob/d6bad9a8be90defc71b27c33e1348a4f6133b852/src/combineReducers.js\nfunction combineReducers(reducers) {\n  // First get an array with all the keys of the reducers \n  const reducerKeys = Object.keys(reducers); // Returns a root reducer function, our createStore function will call this function\n  // with state and action whenever we dispatch an action via store.dispatch\n\n  return function combination(state = {}, action) {\n    const nextState = {}; // This is the final object we are going to return\n    // Loop through all the reducer keys\n\n    for (let i = 0; i < reducerKeys.length; i++) {\n      // Get the current key name\n      const reducerKey = reducerKeys[i]; // Get the current reducer function, \n      // remember we have passed the object with key and reducer fn as a value\n      // in our combineReducers call\n\n      const reducer = reducers[reducerKey]; // Get the the previous state of current reducer\n\n      const previousStateOfReducer = state[reducerKey]; // Get the next state by calling the current reducer function\n\n      const nextStateOfReducer = reducer(previousStateOfReducer, action); // Update the new state for the current reducer \n\n      nextState[reducerKey] = nextStateOfReducer;\n    }\n\n    return nextState;\n  };\n}\n;// CONCATENATED MODULE: ./src_v3/redux/actions/actionTypes.js\nconst INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\nconst ADD_TODO = 'ADD_TODO';\nconst UNDO = 'UNDO';\nconst REDO = 'REDO';\nconst GET_JOKE = 'GET_JOKE';\nconst GET_JOKE_SUCCESS = 'GET_JOKE_SUCCESS';\nconst GET_JOKE_FAILED = 'GET_JOKE_FAILED';\n;// CONCATENATED MODULE: ./src_v3/redux/reducers/counterReducer.js\n\nconst initialState = {\n  counter: 0\n};\nfunction reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    case INCREMENT:\n      return { ...state,\n        counter: state.counter + 1\n      };\n\n    case DECREMENT:\n      return { ...state,\n        counter: state.counter - 1\n      };\n\n    default:\n      return state;\n  }\n}\n;// CONCATENATED MODULE: ./src_v3/redux/utils/undoableReducer.js\n // This implementation is copied from redux docs: https://redux.js.org/recipes/implementing-undo-history\n\nfunction undoable(reducer) {\n  const initialState = {\n    past: [],\n    present: reducer(undefined, {}),\n    // Call the reducer with undefined state and empty action to populate the initial state\n    future: []\n  }; // Return a reducer that handles undo and redo\n\n  return (state = initialState, action = {}) => {\n    const {\n      past,\n      present,\n      future\n    } = state;\n\n    switch (action.type) {\n      case UNDO:\n        {\n          const previous = past[past.length - 1];\n          const newPast = past.slice(0, past.length - 1);\n          const newFuture = [present, ...future];\n          return {\n            past: newPast,\n            present: previous,\n            future: newFuture\n          };\n        }\n\n      case REDO:\n        {\n          const next = future[0];\n          const newFuture = future.slice(1);\n          const newPast = [...past, present];\n          return {\n            past: newPast,\n            present: next,\n            future: newFuture\n          };\n        }\n\n      default:\n        {\n          // Delegate handling the action to the passed reducer\n          const newPresent = reducer(present, action);\n\n          if (newPresent === present) {\n            return state;\n          }\n\n          ;\n          return {\n            past: [...past, present],\n            present: newPresent,\n            future: []\n          };\n        }\n    }\n  };\n}\n;// CONCATENATED MODULE: ./src_v3/redux/reducers/todoReducer.js\n\n\nconst todoReducer_initialState = {\n  items: []\n};\n\nfunction todoReducer_reducer(state = todoReducer_initialState, action = {}) {\n  switch (action.type) {\n    case ADD_TODO:\n      return { ...state,\n        items: [...state.items, action.payload]\n      };\n\n    default:\n      return state;\n  }\n}\n\nconst undoableTodoReducer = undoable(todoReducer_reducer);\n/* harmony default export */ const todoReducer = (undoableTodoReducer);\n;// CONCATENATED MODULE: ./src_v3/redux/reducers/jokeReducer.js\n\nconst jokeReducer_initialState = {\n  loading: false,\n  data: {\n    setup: '',\n    punchline: ''\n  },\n  error: ''\n};\nfunction jokeReducer_reducer(state = jokeReducer_initialState, action = {}) {\n  switch (action.type) {\n    case GET_JOKE:\n      return { ...state,\n        loading: true,\n        error: ''\n      };\n\n    case GET_JOKE_SUCCESS:\n      return { ...state,\n        loading: false,\n        data: action.payload\n      };\n\n    case GET_JOKE_FAILED:\n      return { ...state,\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n;// CONCATENATED MODULE: ./src_v3/redux/reducers/rootReducer.js\n\n\n\n\n/* harmony default export */ const rootReducer = (combineReducers({\n  counter: reducer,\n  todos: todoReducer,\n  joke: jokeReducer_reducer\n}));\n;// CONCATENATED MODULE: ./utils.js\nconst log = color => {\n  return console.log.bind(console, '%c%s', `color: ${color};font-size:14px`);\n};\n\nconst group = (color, bgColor) => {\n  return console.group.bind(console, '%c%s', `color: ${color};background-color: ${bgColor} ;font-weight: bold ; padding: 4px ;`);\n};\n\nconst chalkLog = {\n  green: log('green'),\n  teal: log('teal'),\n  brown: log('brown'),\n  blue: log('blue'),\n  coral: log('coral'),\n  crimson: log('crimson'),\n  darkGray: log('darkGray')\n};\nconst chalkLogGroup = {\n  redish: group('#fff', '#e0005a'),\n  purple: group('#fff', '#9000e0'),\n  brownish: group('#fff', '#801b00d4'),\n  cadetBlue: group('#fff', 'cadetblue')\n};\n;// CONCATENATED MODULE: ./src_v3/redux/middlewares/logger.js\n\n\nconst loggerMiddleware = ({\n  getState\n}) => next => action => {\n  chalkLog.darkGray(\"<==========================================>\");\n  chalkLog.blue('before: appState -> ', JSON.stringify(getState(), null, 2));\n  chalkLog.blue('action -> ', action);\n  const returnedValue = next(action);\n  chalkLog.blue('after: appState -> ', JSON.stringify(getState(), null, 2));\n  return returnedValue;\n};\n\n/* harmony default export */ const logger = (loggerMiddleware);\n;// CONCATENATED MODULE: ./src_v3/redux/middlewares/thunk.js\n// Original thunkMiddleware ref:- https://github.com/reduxjs/redux-thunk/blob/master/src/index.js\nconst thunkMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  if (typeof action === 'function') {\n    return action(dispatch, getState);\n  }\n\n  return next(action);\n};\n\n/* harmony default export */ const thunk = (thunkMiddleware);\n;// CONCATENATED MODULE: ./src_v3/redux/middlewares/index.js\n\n\n\n;// CONCATENATED MODULE: ./src_v3/redux/utils/applyMiddleware.js\n// Original redux.js applyMiddleware ref:- https://github.com/reduxjs/redux/blob/d6bad9a8be90defc71b27c33e1348a4f6133b852/src/applyMiddleware.js\nconst appyMiddleware = (...middlewares) => store => {\n  if (middlewares.length === 0) {\n    return dispatch => dispatch;\n  }\n\n  const middlewareAPI = {\n    getState: store.getState,\n    dispatch: (action, ...args) => dispatch(action, ...args)\n  };\n\n  if (middlewares.length === 1) {\n    return middlewares[0](middlewareAPI);\n  }\n\n  const boundMiddlewares = middlewares.map(middleware => middleware(middlewareAPI));\n  return boundMiddlewares.reduce((a, b) => next => a(b(next)));\n};\n;// CONCATENATED MODULE: ./src_v3/redux/actions/actionCreators.js\n\nconst increment = () => ({\n  type: INCREMENT\n});\nconst decrement = () => ({\n  type: DECREMENT\n});\nconst addTodo = payload => ({\n  type: ADD_TODO,\n  payload\n});\nconst undo = () => ({\n  type: UNDO\n});\nconst redo = () => ({\n  type: REDO\n});\nconst getJokeSuccess = payload => ({\n  type: GET_JOKE_SUCCESS,\n  payload\n});\nconst getJokeFailed = error => ({\n  type: GET_JOKE_FAILED,\n  payload: error\n});\nconst getJoke = dispatch => {\n  dispatch({\n    type: GET_JOKE\n  });\n  return fetch('https://official-joke-api.appspot.com/random_joke') // https://github.com/15Dkatz/official_joke_api\n  .then(res => res.json()).then(({\n    setup,\n    punchline\n  }) => {\n    const payload = {\n      setup,\n      punchline\n    };\n    dispatch(getJokeSuccess(payload));\n  }).catch(err => dispatch(getJokeFailed(err)));\n};\n;// CONCATENATED MODULE: ./src_v3/components/counter.component.js\n\nclass CounterComponent {\n  constructor(store) {\n    this.state = {\n      counter: 0\n    };\n    store.subscribe(() => {\n      // Subscribe/Connect to store\n      const state = store.getState();\n      this.setState({ ...state.counter\n      });\n    });\n    this.counterElementRef = document.getElementById('counter');\n    this.bindActions(store);\n  }\n\n  setState(newState) {\n    this.state = { ...this.state,\n      ...newState\n    };\n    this.render(); // Update the UI\n  }\n\n  bindActions(store) {\n    document.getElementById('btn-increment').addEventListener('click', () => {\n      store.dispatch(increment());\n    });\n    document.getElementById('btn-decrement').addEventListener('click', () => {\n      store.dispatch(decrement());\n    });\n  } // Render the UI\n\n\n  render() {\n    const {\n      counter\n    } = this.state;\n    this.counterElementRef.textContent = counter;\n  }\n\n}\n;// CONCATENATED MODULE: ./src_v3/components/todo.component.js\n\nclass TodoComponent {\n  constructor(store) {\n    this.state = {\n      past: [],\n      present: {\n        items: []\n      },\n      future: []\n    };\n    store.subscribe(() => {\n      // Subscribe/Connect to store\n      const state = store.getState();\n      this.setState({ ...state.todos\n      });\n    });\n    this.setElementRef();\n    this.bindActions(store);\n  }\n\n  setState(newState) {\n    this.state = { ...this.state,\n      ...newState\n    };\n    this.render(); // Update the UI\n  }\n\n  setElementRef() {\n    this.containerRef = document.getElementById('todo-container');\n    this.btnAddRef = document.getElementById('btn-add');\n    this.btnUndoRef = document.getElementById('btn-undo');\n    this.btnRedoRef = document.getElementById('btn-redo');\n    this.inputRef = document.getElementById('input');\n  }\n\n  bindActions(store) {\n    this.btnAddRef.addEventListener('click', () => {\n      const value = this.inputRef.value;\n\n      if (value) {\n        const payload = {\n          text: value\n        };\n        store.dispatch(addTodo(payload));\n      }\n\n      this.inputRef.value = '';\n    });\n    this.btnUndoRef.addEventListener('click', () => {\n      store.dispatch(undo());\n    });\n    this.btnRedoRef.addEventListener('click', () => {\n      store.dispatch(redo());\n    });\n  }\n\n  canUndoRedo() {\n    const {\n      past,\n      future\n    } = this.state;\n    past.length === 0 ? this.btnUndoRef.setAttribute('disabled', 'true') : this.btnUndoRef.removeAttribute('disabled');\n    future.length === 0 ? this.btnRedoRef.setAttribute('disabled', 'true') : this.btnRedoRef.removeAttribute('disabled');\n  }\n\n  renderList(items) {\n    this.canUndoRedo(); // check for list ref\n\n    const listRef = document.getElementById('todo-list');\n\n    if (items.length === 0) {\n      listRef && this.containerRef.removeChild(listRef); // remove old list from dom\n\n      return null;\n    } // create a ul element\n\n\n    const ulElement = document.createElement('ul');\n    ulElement.id = 'todo-list'; // loop through all the items and append the list item to ul element\n\n    items.forEach(item => {\n      const li = document.createElement('li');\n      li.textContent = item.text;\n      ulElement.appendChild(li);\n    }); // append the ul element to the container\n\n    listRef ? this.containerRef.replaceChild(ulElement, listRef) : this.containerRef.appendChild(ulElement);\n  } // Render the UI\n\n\n  render() {\n    const {\n      items\n    } = this.state.present;\n    this.renderList(items);\n  }\n\n}\n;// CONCATENATED MODULE: ./src_v3/components/joke.component.js\n\nclass JokeComponent {\n  constructor(store) {\n    this.state = {\n      loading: false,\n      data: {\n        setup: '',\n        punchline: ''\n      },\n      error: ''\n    };\n    store.subscribe(() => {\n      // Subscribe/Connect to store\n      const state = store.getState();\n      this.setState({ ...state.joke\n      });\n    });\n    this.jokeContainerRef = document.getElementById('joke-container');\n    this.bindAction(store);\n  }\n\n  setState(newState) {\n    this.state = { ...this.state,\n      ...newState\n    };\n    this.render(); // Update the UI\n  }\n\n  bindAction(store) {\n    document.getElementById('btn-getJoke').addEventListener('click', () => {\n      getJoke(store.dispatch);\n    });\n  } // Render the UI\n\n\n  render() {\n    const {\n      loading,\n      data,\n      error\n    } = this.state;\n\n    if (loading) {\n      return this.jokeContainerRef.textContent = 'Loading a joke please wait...';\n    } else if (error) {\n      return this.jokeContainerRef.textContent = `${error}, please try again.`;\n    }\n\n    const {\n      setup,\n      punchline\n    } = data;\n    const p1 = document.createElement('p');\n    p1.setAttribute('style', 'margin: 5px');\n    const p2 = document.createElement('p');\n    p2.setAttribute('style', 'margin: 5px');\n    p1.textContent = setup;\n    p2.textContent = punchline && `${punchline} \\uD83D\\uDE00`; // where \\uD83D\\uDE00 is a js emoji code \n\n    this.jokeContainerRef.textContent = '';\n    this.jokeContainerRef.appendChild(p1);\n    this.jokeContainerRef.appendChild(p2);\n  }\n\n}\n;// CONCATENATED MODULE: ./src_v3/app.js\n\n\n\n\n\n\n\nconst middlewares = [logger, thunk];\nconst store = createStore(rootReducer, {}, appyMiddleware(...middlewares));\n\nfunction loadApp() {\n  const counterComponent = new CounterComponent(store);\n  const todoComponent = new TodoComponent(store);\n  const jokeComponent = new JokeComponent(store);\n  counterComponent.render();\n  todoComponent.render();\n  jokeComponent.render();\n} // Bootstrap the application \n\n\nloadApp();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///359\n")})();